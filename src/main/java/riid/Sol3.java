package riid;

/**
 * 다음은 세 이미지에 포함된 **문제 설명 및 제약 조건 전체 텍스트**입니다:
 *
 * ---
 *
 * ### 문제 설명
 *
 * > n x n 크기의 행렬의 각 칸에 1부터 n²까지의 숫자가 지그재그 방향으로 채워져 있습니다. 다음은 n = 5인 경우의 예시입니다.
 *
 * ```
 *   1   2   6   7  15
 *   3   5   8  14  16
 *   4   9  13  17  22
 *  10  12  18  23  24
 *  11  19  20  25  ---------------
 * ```
 *
 * > 이때 r행, c열의 칸에 어떤 숫자가 적혀있는지 구하려고 합니다. 예를 들어 위 그림에서 r = 3, c = 2인 경우 3행, 2열의 위치에는 9가 들어있습니다.
 * > 지그재그 행렬의 크기 n, 행의 위치 r, 열의 위치 c가 매개변수로 주어질 때, n x n 크기의 지그재그 행렬의 r행 c열에 들어있는 숫자를 return 하도록 `solution` 함수를 완성해주세요.
 *
 * ---
 *
 * ### 제약사항
 *
 * * n은 1 이상 10,000,000 이하의 자연수입니다.
 * * r과 c는 각각 1 이상 n 이하의 자연수입니다.
 * * 정답이 2³¹ - 1보다 커질 수 있음에 주의하세요.
 *
 * ---
 *
 * ### 입력 예
 *
 * | n | r | c | result |
 * | - | - | - | ------ |
 * | 5 | 3 | 2 | 9      |
 * | 6 | 5 | 4 | 29     |
 *
 * ---
 *
 * ### 입력 예 설명
 *
 * * **입출력 예 #1**
 *   문제의 그림을 참고해주세요.
 *
 * * **입출력 예 #2**
 *   다음 그림을 참고해주세요.
 *
 * ```
 *   1   2   6   7  15  16
 *   3   5   8  14  17  26
 *   4   9  13  18  25  27
 *  10  12  19  24  28  33
 *  11  20  23  29  32  34
 *  21  22  30  31  35  36
 * ```
 *
 *
 * 풀이
 *
 * 아주 간단히 다섯 줄로 요약하면 이렇게 됩니다:
 *
 * 1. **대각선 번호 계산**
 *    \- `d = r + c`
 *
 * 2. **이전 대각선까지 채워진 칸 수** (`beforeSum`)
 *
 *    * `d ≤ n+1` (오름 구간): $(d-2)(d-1)/2$
 *    * `d > n+1` (내림 구간):
 *
 *      1. 오름 구간 전체 $n(n+1)/2$
 *      2. 내림 구간 앞부분 산술급수 합 $\;t\,(first+last)/2$
 *
 * 3. **이 대각선의 시작점** (`start`)
 *    \- `start = (d ≤ n+1) ? 1 : d - n`
 *
 * 4. **대각선 내 상대 인덱스** (`idx`)
 *
 *    * `d`가 홀수 → 위→아래 채움 → `idx = r - start + 1`
 *    * `d`가 짝수 → 아래→위 채움 → `idx = c - start + 1`
 *
 * 5. **결과 = beforeSum + idx**
 *
 * 이 다섯 단계만 거치면 $O(1)$ 연산으로 곧바로 $(r,c)$ 위치의 값을 계산할 수 있습니다.
 *
 *
 * 비슷한 문제
 * https://www.acmicpc.net/problem/1913
 * https://www.acmicpc.net/problem/1022
 * https://www.acmicpc.net/problem/16926
 * https://www.acmicpc.net/problem/1074
 */
public class Sol3 {
    public long solution(int n, int r, int c) {
        // 1) 대각선 번호 (1번 대각선부터 2n번까지)
        long d = (long) r + c;

        // 2) 대각선 이전까지 채워진 셀의 개수 계산
        long beforeSum;
        // 오름구간 -> 대각선의 길이가 커진다. -> 한 대각선에 속한 원소수가 많아진다.
        if (d <= n + 1) {
            // 오름차순 구간: 길이 1, 2, …, (d−1) 대각선의 합
            beforeSum = (d - 2L) * (d - 1L) / 2;
        }
        // 내림 구간 -> 대각선의 길이가 작아진다
        else {
            // 오름 구간(peak까지) 합
            long upSum = (long) n * (n + 1) / 2;
            // 내림 구간에서 현재 대각선 바로 전까지 대각선 개수 (0-based)
            long t = d - n - 2;
            // 내림 구간 첫 대각선 길이와 현재 대각선 길이
            long first = n - 1;
            long last  = 2L * n + 2 - d;
            // 내림 구간 산술급수 합
            long downSum = t * (first + last) / 2;
            beforeSum = upSum + downSum;
        }

        // 3) 이 대각선이 실제로 어디에서 시작하는지
        //    오름 구간이면 (1,1)부터, 내림 구간이면 (d-n, n) 또는 (n, d-n)부터
        long start = (d <= n + 1) ? 1 : d - n;

        // 4) 대각선 안에서 (r,c)가 몇 번째 셀인지
        long idx;
        if (d % 2 == 1) {
            // 홀수 대각선: 위→아래로 번호 채움 → 행 기준 상대 위치
            idx = r - start + 1;
        } else {
            // 짝수 대각선: 아래→위로 번호 채움 → 열 기준 상대 위치
            idx = c - start + 1;
        }

        // 5) 전체 순번 = 이전까지 채워진 셀 수 + 대각선 내 상대 인덱스
        return beforeSum + idx;
    }

    public static void main(String[] args) {
        Sol3 s3 = new Sol3();
//        long solution = s3.solution(5, 3, 2);
//        System.out.println(solution);
        long solution = s3.solution(6, 5, 4);
        System.out.println(solution);
    }
}
